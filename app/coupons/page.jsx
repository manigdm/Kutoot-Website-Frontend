"use client"
import React, { useEffect, useMemo, useState, Fragment } from "react";
import { AiOutlineClockCircle, AiOutlineLeft } from "react-icons/ai";
import auth from "@/utils/auth";
import Image from "next/image";
import Loading from "@/components/common/loading";

// Small pill used during manual entry
const DottedCircle = ({ value }) => (
  <span
    className={
      "w-7 h-7 mx-[2px] rounded-full border-2 border-dashed border-gray-400 flex items-center justify-center text-base font-bold bg-white" +
      (value ? " border-[#A7192E] text-[#A7192E]" : " text-gray-300")
    }
  >
    {value || ""}
  </span>
);

const Page = () => {
  const [coupons, setCoupons] = useState([]);
  const [timeLeft, setTimeLeft] = useState(300); // seconds
  const [selectedNumbers, setSelectedNumbers] = useState([]); // numbers (1..49)
  const [editingCouponId, setEditingCouponId] = useState(null);

  const [response, setResponse] = useState(null);
  const [initialLoading, setInitialLoading] = useState(true);
  const [saveLoading, setSaveLoading] = useState(false);
  const [error, setError] = useState("");

  // ========== Initial purchase call ==========
  useEffect(() => {
    const fetchCoinPurchase = async () => {
      const payload = {
        camp_id: "07",
        amount: "100",
        quantity: "2",
        base_plan_id: "2",
      };

      let baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
      if (!baseUrl.endsWith("/")) baseUrl += "/";
      const apiUrl = `${baseUrl}api/user/coinpurchase`;

      const authData = auth?.();
      if (!authData) {
        setError("You are not authenticated.");
        return;
      }

      setInitialLoading(true);
      setError("");
      try {
        const res = await fetch(apiUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            authorization: `Bearer ${authData.access_token}`,
          },
          body: JSON.stringify(payload),
        });

        if (!res.ok) {
          const errorText = await res.text().catch(() => "");
          throw new Error(
            `API error (${res.status}): ${errorText || res.statusText}`
          );
        }

        const data = await res.json().catch(() => {
          throw new Error("Invalid JSON response");
        });

        setResponse(data);
      } catch (err) {
        setResponse(null);
        setError(err?.message || "Something went wrong.");
      } finally {
        setInitialLoading(false);
      }
    };

    fetchCoinPurchase();
  }, []);

  // ========== Generate coupons from API response (only once) ==========
  useEffect(() => {
    const list = response?.data?.coupons;
    if (Array.isArray(list) && list.length && coupons.length === 0) {
      const newCoupons = list.map((c, i) => ({
        serialNo: i + 1,
        numbers: (c.coupon_code || "").match(/.{1,2}/g) || [], // ["12","34","..."]
        isManual: false,
        ...c, // keep API fields: id, coupon_id, etc.
      }));
      setCoupons(newCoupons);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [response?.data?.coupons]);

  // ========== Optimized countdown timer ==========
  useEffect(() => {
    const id = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(id);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(id);
  }, []);

  const formattedTime = useMemo(() => {
    const mins = Math.floor(timeLeft / 60);
    const secs = timeLeft % 60;
    return `${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
  }, [timeLeft]);

  const autoGeneratedCount = useMemo(
    () => coupons.filter((c) => !c.isManual).length,
    [coupons]
  );

  // ========== Edit flow ==========
  const handleManualGenerate = (couponId) => {
    setEditingCouponId(couponId);
    setSelectedNumbers([]); // reset for new edit
  };

  const handleNumberSelect = (num) => {
    if (selectedNumbers.length < response?.data?.numbers_per_ticket) {
      setSelectedNumbers((prev) => [...prev, num]);
    }
  };

  const handleSaveManualCoupon = async () => {
    if (selectedNumbers.length !== response?.data?.numbers_per_ticket || editingCouponId == null) return;

    setSaveLoading(true);
    setError("");

    let baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
    if (!baseUrl.endsWith("/")) baseUrl += "/";
    const apiUrl = `${baseUrl}api/user/singlecoderegenerate`;

    const authData = auth?.();
    if (!authData) {
      setError("You are not authenticated.");
      setSaveLoading(false);
      return;
    }

    // Find the coupon being edited
    const editingCoupon = coupons.find((c) => c.id === editingCouponId);
    if (!editingCoupon) {
      setError("Coupon not found.");
      setSaveLoading(false);
      return;
    }

    const payload = {
      order_id: response?.data?.id, // adjust if different in your API
      coupon_id: editingCoupon?.id ?? editingCoupon?.coupon_id, // choose correct server id
      coupon_code: selectedNumbers
        .map((n) => n.toString().padStart(2, "0"))
        .join(""),
    };

    try {
      const res = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          authorization: `Bearer ${authData.access_token}`,
        },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const errorText = await res.text().catch(() => "");
        throw new Error(
          `API error (${res.status}): ${errorText || res.statusText}`
        );
      }

      // Update local state (no splice)
      setCoupons((prev) => {
        const next = [...prev];
        const idx = next.findIndex((el) => el.id === editingCouponId);
        if (idx !== -1) {
          next[idx] = {
            ...next[idx],
            numbers: selectedNumbers.map((n) => n.toString().padStart(2, "0")),
            isManual: true,
          };
        }
        return next;
      });

      setSelectedNumbers([]);
      setEditingCouponId(null);
    } catch (err) {
      setError(err?.message || "Something went wrong.");
    } finally {
      setSaveLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[#FFFDF2] pt-6 pb-24" style={{ padding: '30px 60px' }}>
      {/* Top loader / error */}
      {initialLoading && (
        <div className="mb-4" style={{
          background: '#fdfae5',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: 'calc(100vh - 80px)'
        }}>
          <Loading />
        </div>
      )}
      {!initialLoading && error && (
        <div className="mb-4 text-red-600 text-sm">
          <strong>Error:</strong> {error}
        </div>
      )}
      {!initialLoading && !error && (
        <div
          className="flex flex-col items-center"
          style={{
            background: '#fff',
            padding: '30px',
            height: '100%',
            width: '100%',
            borderRadius: '6px',
            boxShadow: '0px 0px 9px #3B322B1A'
          }}
        >
          <div className="w-full max-w-7xl bg-white overflow-hidden">
            {/* Table Header */}
            <div className="grid grid-cols-6 text-xs font-semibold px-6 py-3 border-b rounded-t-xl" style={{ borderColor: '#3B322B' }}>
              <div className="text-center">Order ID</div>
              <div className="text-center">Campaign</div>
              <div className="text-center">Quantity</div>
              <div className="text-center">Coins</div>
              <div className="text-center">Coupons</div>
              <div className="text-center">Price</div>
            </div>

            {/* Order Details */}
            <div className="grid grid-cols-6 px-6 py-2 text-center border-b text-sm font-medium">
              <div>{response?.data?.id ?? "-"}</div>
              <div>{response?.data?.camp_title ?? "-"}</div>
              <div>{response?.data?.quantity ?? "-"}</div>
              <div>{response?.data?.camp_coins_per_campaign ?? "-"}</div>
              <div>{response?.data?.camp_coupons_per_campaign ?? "-"}</div>
              <div>â‚¹{response?.data?.camp_ticket_price ?? "-"}</div>
            </div>

            {/* Eligibility & Timer */}
            <div className="bg-[#FDF3EC] border-b px-6 py-2 flex items-center">
              <span className="text-[13px] text-[#3B322B]" style={{ fontWeight: 'bold' }}>
                You can manually edit up to 10 coupons. Remaining ones will be auto-generated for you.
              </span>
            </div>

            {/* Status Row */}
            <div style={{ background: "#FFFDF2" }}>
              <div className="flex justify-between items-center px-6 py-3 border-b bg-white">
                <span className="text-green-600 font-semibold text-sm">
                  {coupons.length - autoGeneratedCount}/{coupons.length} coupons
                  generated
                </span>
                <div className="flex items-center gap-2 text-sm text-white font-medium bg-[#ED1B36] px-3 py-1" style={{
                  borderR
                    : '4px'
                }}>
                  <AiOutlineClockCircle className="w-4 h-4" />
                  <span className="hidden sm:inline">
                    Please choose your lucky numbers within
                  </span>
                  <strong className="font-mono">{formattedTime}</strong> mins
                </div>
                <button className="flex items-center text-gray-500 text-xs hover:underline">
                  <AiOutlineLeft className="mr-1" />
                  Go back
                </button>
              </div>

              {/* Coupon Table Header */}
              <div className="grid grid-cols-12 px-6 py-2 border-b text-xs font-semibold text-gray-600 uppercase">
                <div className="col-span-1 text-center">Serial no.</div>
                <div className="col-span-4 text-center">Coupon</div>
                <div className="col-span-1 text-center">Series</div>
                <div className="col-span-3 text-center">Coupon ID</div>
                <div className="col-span-3 text-center">Coupon Generation</div>
              </div>

              {/* Coupon List */}
              {coupons.map((coupon) => (
                <div
                  key={coupon.id ?? coupon.serialNo}
                  className="grid grid-cols-12 py-3 px-6 border-b text-sm relative bg-[#FCFBF5]"
                >
                  {/* Serial No */}
                  <div className="col-span-1 flex justify-center">
                    <span
                      style={{
                        background:
                          editingCouponId === (coupon.id ?? coupon.serialNo)
                            ? "#4D4236"
                            : "#9f9f9f",
                      }}
                      className="w-8 h-8 rounded-full text-white flex items-center justify-center text-sm font-semibold"
                    >
                      {String(coupon.serialNo).padStart(2, "0")}
                    </span>
                  </div>

                  {/* Coupon ticket */}
                  <div className="col-span-4 flex items-center gap-2">
                    <div className="relative py-4">
                      <div className=" bg-white rounded-xl border border-gray-300 flex overflow-hidden w-[340px] min-h-[100px] shadow-sm">
                        {/* Left side */}
                        <div className="flex flex-col items-start justify-center w-[35%] pl-3 pr-3 py-3">
                          <Image
                            width="200"
                            height="80"
                            style={{ objectFit: "contain" }}
                            src="/public/images/logo-kutoot.png"
                            alt="logo"
                          />
                          <div className="mt-1 text-[14px] font-semibold leading-6 text-gray-800">
                            {response?.data?.camp_title}
                          </div>
                        </div>

                        {/* Notches + divider */}
                        <div className=" flex flex-col justify-between items-center h-full">
                          <div className="absolute top-3">
                            <div className="w-5 h-4 bg-[#FDFBF6] rounded-b-full" />
                          </div>
                          <div className="h-full border-l border-dashed border-gray-300 mx-2" />
                          <div className="absolute bottom-3">
                            <div className="w-5 h-4 bg-[#FDFBF6] rounded-t-full" />
                          </div>
                        </div>

                        {/* Right side */}
                        <div className="flex flex-col justify-center flex-1 pl-2 pr-2">
                          <div className="text-xs text-gray-500">Campaign ID</div>
                          <div className="font-normal text-base text-gray-700 mb-1">
                            {coupon?.id ?? "-"}
                          </div>
                          <div className="text-xs text-gray-500">Coupon ID</div>
                          <div className="font-normal text-sm text-gray-800 tracking-wider">
                            <span>{response.data?.['series-prefix']} </span>
                            <span className="text-lg text-gray-700">-</span>
                            {coupon.numbers.map((num, i) => (
                              <Fragment key={i}>
                                <span>{num}</span>
                                {i < coupon.numbers.length - 1 && (
                                  <span className="text-lg text-gray-700">-</span>
                                )}
                              </Fragment>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Series */}
                  <div className="col-span-1 text-center font-semibold text-lg">
                    {coupon.series}
                  </div>

                  {/* Coupon ID or Editing UI */}
                  {editingCouponId === coupon.id ? (
                    <div className="col-span-3 flex flex-col justify-center items-center">
                      <div className="flex items-center gap-1 justify-center">
                        <span className="font-bold text-lg text-gray-700">
                        {response.data?.['series-prefix']}
                        </span>
                        <span className="text-xl text-gray-700">-</span>
                        {[...Array((response?.data?.numbers_per_ticket))].map((_, i) => (
                          <Fragment key={i}>
                            <DottedCircle
                              value={
                                selectedNumbers[i]
                                  ? selectedNumbers[i]
                                    .toString()
                                    .padStart(2, "0")
                                  : ""
                              }
                            />
                            {i < 5 && (
                              <span className="text-xl text-gray-700">-</span>
                            )}
                          </Fragment>
                        ))}
                      </div>

                      <div className="mt-3 bg-white rounded-xl shadow border border-gray-200 px-4 py-3 w-[280px]">
                        <div className="flex justify-end mb-1">
                          <button
                            className="text-gray-400 hover:text-gray-700"
                            onClick={() => setEditingCouponId(null)}
                            aria-label="Close number pad"
                          >
                            Ã—
                          </button>
                        </div>
                        <div className="grid grid-cols-10 gap-4 text-xs">
                          {Array.from(
                            { length: response.data?.number_max - response.data?.number_min + 1 },
                            (_, i) => response.data?.number_min + i
                          ).map((num) => (
                            <button
                              key={num}
                              onClick={() => handleNumberSelect(num)}
                              // disabled={
                              //   selectedNumbers.includes(num) ||
                              //   selectedNumbers.length >= 6
                              // }
                              className={`w-6 h-6 rounded-full border font-medium 
      bg-white text-gray-700 border-gray-200 hover:bg-gray-100
    `}
                            >
                              {num.toString().padStart(2, "0")}
                            </button>
                          ))}

                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="col-span-3 text-center font-mono">
                      <div className="flex items-center gap-2">
                        <div className="flex gap-1 ml-1 items-center">
                          <span className="font-semibold text-lg text-gray-700">
                          {response.data?.['series-prefix']} 
                          </span>
                          <span className="text-2xl text-gray-700">-</span>
                          {coupon.numbers.map((num, i) => (
                            <Fragment key={i}>
                              <span className="w-6 h-6 rounded-full bg-red-600 text-white flex items-center justify-center text-xs font-bold">
                                {num}
                              </span>
                              {i < coupon.numbers.length - 1 && (
                                <span className="text-2xl text-gray-700">
                                  -
                                </span>
                              )}
                            </Fragment>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Coupon Generation */}
                  <div className="col-span-3 flex flex-col items-center">
                    {editingCouponId === coupon.id ? (
                      <div className="flex flex-col items-center w-full">
                        <button
                          className={`w-28 mb-2 py-1 rounded-full font-semibold ${(selectedNumbers.length === response?.data?.numbers_per_ticket) && !saveLoading
                            ? "bg-[#ea580c] text-white"
                            : "bg-[#D9D9D9] text-white cursor-not-allowed"
                            }`}
                          disabled={(selectedNumbers.length !== response?.data?.numbers_per_ticket) || saveLoading}
                          onClick={handleSaveManualCoupon}
                        >
                          {saveLoading ? "Saving..." : "Save"}
                        </button>
                        <button
                          className="w-28 mb-2 py-1 rounded-full font-semibold bg-transparent text-[#000000b0]"
                          style={{ border: "1px solid #00000017" }}
                          onClick={() => setEditingCouponId(null)}
                        >
                          Cancel
                        </button>
                      </div>
                    ) : (
                      <u
                        className="text-xs transition font-medium cursor-pointer"
                        onClick={() => handleManualGenerate(coupon.id)}
                      >
                        Edit &rsaquo;
                      </u>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Checkout Fixed Footer */}
          <div className="fixed bottom-0 left-0 w-full bg-orange-600 py-3 flex justify-center z-50">
            <button
              disabled={formattedTime === "00:00"}
              onClick={() => alert("Proceeding to checkout...")}
              className="w-full max-w-4xl text-center text-white text-lg font-semibold"
            >
              Proceed to Checkout &nbsp; &rarr;
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Page;
