"use client";
import React, { useEffect, useMemo, useState, Fragment } from "react";
import { AiOutlineClockCircle, AiOutlineLeft } from "react-icons/ai";
import auth from "@/utils/auth";
import Image from "next/image";
import Loading from "@/components/common/loading";
import { useSearchParams } from "next/navigation";// NEW: react-bootstrap
import {
  Container,
  Row,
  Col,
  Button,
  Alert,
  Badge,
  Card,
} from "react-bootstrap";

// Small pill used during manual entry (no Tailwind)
const DottedCircle = ({ value }) => (
  <span
    style={{
      width: 28,
      height: 28,
      margin: "0 2px",
      borderRadius: "9999px",
      border: "2px dashed",
      borderColor: value ? "#A7192E" : "#9CA3AF",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      fontSize: 14,
      fontWeight: 700,
      background: "#fff",
      color: value ? "#A7192E" : "#9CA3AF",
    }}
  >
    {value || ""}
  </span>
);

const Page = () => {
  const [coupons, setCoupons] = useState([]);
  const [timeLeft, setTimeLeft] = useState(300); // seconds
  const [selectedNumbers, setSelectedNumbers] = useState([]); // numbers (1..49)
  const [editingCouponId, setEditingCouponId] = useState(null);

  const [response, setResponse] = useState(null);
  const [initialLoading, setInitialLoading] = useState(true);
  const [saveLoading, setSaveLoading] = useState(false);
  const [error, setError] = useState("");
  const searchParams = useSearchParams();
  const campaignId = searchParams.get("campaignId");
  const baseplanId = searchParams.get("baseplanId");
  const ticketPrice = searchParams.get("ticketPrice");

  // ========== Initial purchase call ==========
  useEffect(() => {
    const fetchCoinPurchase = async () => {
      const payload = {
        camp_id: campaignId,
        amount: ticketPrice,
        quantity: "1",
        base_plan_id: baseplanId,
      };

      let baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
      if (!baseUrl.endsWith("/")) baseUrl += "/";
      const apiUrl = `${baseUrl}api/user/coinpurchase`;

      const userData = auth?.();

      if (!userData) {
        setError("No user data found. Please login.");
        return;
      }
      const token = JSON.parse(userData);
      if (!token?.access_token) {
        setError("You are not authenticated.");
        return;
      }

      setInitialLoading(true);
      setError("");
      try {
        const res = await fetch(apiUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            authorization: `Bearer ${token.access_token}`,
          },
          body: JSON.stringify(payload),
        });
        if (!res.ok) {
          const errorText = await res.text().catch(() => "");
          throw new Error(
            `API error (${res.status}): ${errorText || res.statusText}`
          );
        }
        const data = await res.json().catch(() => {
          throw new Error("Invalid JSON response");
        });
        setResponse(data);
      } catch (err) {
        setResponse(null);
        setError(err?.message || "Something went wrong.");
      } finally {
        setInitialLoading(false);
      }
    };

    fetchCoinPurchase();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  // ========== Generate coupons from API response (only once) ==========
  useEffect(() => {
    const list = response?.data?.coupons?.slice(0, 10) || [];
    if (Array.isArray(list) && list.length && coupons.length === 0) {
      const newCoupons = list.map((c, i) => ({
        serialNo: i + 1,
        numbers: (c.coupon_code || "").match(/.{1,2}/g) || [], // ["12","34","..."]
        isManual: false,
        ...c, // keep API fields: id, coupon_id, etc.
      }));
      setCoupons(newCoupons);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [response?.data?.coupons]);

  // ========== Optimized countdown timer ==========
  useEffect(() => {
    const id = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(id);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(id);
  }, []);

  const formattedTime = useMemo(() => {
    const mins = Math.floor(timeLeft / 60);
    const secs = timeLeft % 60;
    return `${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
  }, [timeLeft]);

  const autoGeneratedCount = useMemo(
    () => coupons.filter((c) => !c.isManual).length,
    [coupons]
  );

  // ========== Edit flow ==========
  const handleManualGenerate = (couponId) => {
    setEditingCouponId(couponId);
    setSelectedNumbers([]); // reset for new edit
  };

  const handleNumberSelect = (num) => {
    if (selectedNumbers.length < response?.data?.numbers_per_ticket) {
      setSelectedNumbers((prev) => [...prev, num]);
    }
  };

  const handleSaveManualCoupon = async () => {
    if(
      selectedNumbers.length !== response?.data?.numbers_per_ticket ||
      editingCouponId == null
    )
    return;

    setSaveLoading(true);
    setError("");

    let baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
    if (!baseUrl.endsWith("/")) baseUrl += "/";
    const apiUrl = `${baseUrl}api/user/singlecoderegenerate`;

    const authData = auth?.();
    console.log({ authData });
    
    if (!authData) {
      setError("You are not authenticated.");
      setSaveLoading(false);
      return;
    }

    // Find the coupon being edited
    const editingCoupon = coupons.find((c) => c.id === editingCouponId);
    if (!editingCoupon) {
      setError("Coupon not found.");
      setSaveLoading(false);
      return;
    }

    const payload = {
      order_id: response?.data?.id,
      coupon_id: editingCoupon?.id ?? editingCoupon?.coupon_id,
      coupon_code: selectedNumbers
        .map((n) => n.toString().padStart(2, "0"))
        .join(""),
    };

    try {
      const res = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          authorization: `Bearer ${authData.access_token}`,
        },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const errorText = await res.text().catch(() => "");
        throw new Error(
          `API error (${res.status}): ${errorText || res.statusText}`
        );
      }

      // Update local state (no splice)
      setCoupons((prev) => {
        const next = [...prev];
        const idx = next.findIndex((el) => el.id === editingCouponId);
        if (idx !== -1) {
          next[idx] = {
            ...next[idx],
            numbers: selectedNumbers.map((n) => n.toString().padStart(2, "0")),
            isManual: true,
          };
        }
        return next;
      });

      setSelectedNumbers([]);
      setEditingCouponId(null);
    } catch (err) {
      setError(err?.message || "Something went wrong.");
    } finally {
      setSaveLoading(false);
    }
  };

  return (

    <div
      style={{
        minHeight: "100vh",
        background: "#FFFDF2",
        paddingTop: 24,
        paddingBottom: 96,
        paddingLeft: 60,
        paddingRight: 60,
      }}
    >
      {/* Top loader / error */}
      {initialLoading && (

        <div
          style={{
            background: "#fdfae5",
            height: "calc(100vh - 80px)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            marginBottom: 16,
          }}
        >
          <Loading />
        </div>
      )}

      {!initialLoading && error && (

        <Alert variant="danger" style={{ marginTop: '50px' }}>
          <strong>Error:</strong> {error}
        </Alert>
      )}

      {!initialLoading && !error && (
        <Container
          fluid
          style={{
            background: "#fff",
            padding: 30,
            marginTop: '60px',
            borderRadius: 6,
            boxShadow: "0px 0px 9px #3B322B1A",
          }}
        >
          <div style={{ width: "100%", maxWidth: 1280, margin: "0 auto" }}>
            {/* Table Header */}
            <Row
              className="align-items-center"
              style={{
                fontSize: 17,
                fontWeight: 600,
                padding: "12px 24px",
                borderBottom: "1px solid #3B322B",
                borderTopLeftRadius: 12,
                borderTopRightRadius: 12,
              }}
            >
              <Col xs={2} className="text-center">
                Order ID
              </Col>
              <Col xs={2} className="text-center">
                Campaign
              </Col>
              <Col xs={2} className="text-center">
                Quantity
              </Col>
              <Col xs={2} className="text-center">
                Coins
              </Col>
              <Col xs={2} className="text-center">
                Coupons
              </Col>
              <Col xs={2} className="text-center">
                Price
              </Col>
            </Row>

            {/* Order Details */}
            <Row
              style={{
                padding: "10px 24px",
                textAlign: "center",
                fontSize: 17,
                fontWeight: 500,
              }}
            >
              <Col xs={2}>{response?.data?.id ?? "-"}</Col>
              <Col xs={2}>{response?.data?.camp_title ?? "-"}</Col>
              <Col xs={2}>{response?.data?.quantity ?? "-"}</Col>
              <Col xs={2}>{response?.data?.camp_coins_per_campaign ?? "-"}</Col>
              <Col xs={2}>
                {response?.data?.camp_coupons_per_campaign ?? "-"}
              </Col>
              <Col xs={2}>â‚¹{response?.data?.camp_ticket_price ?? "-"}</Col>
            </Row>

            {/* Eligibility & Timer */}
            <Row
              style={{
                background: "#FDF3EC",
                padding: "2px 2px 6px",
                alignItems: "center",
                marginBottom: '30px'
              }}
            >
              <Col>
                <span
                  style={{
                    fontSize: 14,
                    color: "#3B322B",
                    fontWeight: "bold",
                  }}
                >
                  You can manually edit up to 10 coupons. Remaining ones will be
                  auto-generated for you.
                </span>
              </Col>
            </Row>

            {/* Status Row */}
            <div style={{ background: "#FDF3EC" }}>
              <Row
                className="align-items-center"
                style={{
                  padding: "18px 30px 18px 60px",
                  borderBottom: "1px solid #3B322B", background: "#FDF3EC"
                }}
              >
                <Col xs="auto">
                  <span
                    style={{
                      color: "#12B347",
                      fontWeight: 600,
                      fontSize: 17,
                    }}
                  >
                    {coupons.length - autoGeneratedCount}/{coupons.length}{" "}
                    coupons generated
                  </span>
                </Col>

                <Col className="d-flex justify-content-center">
                  <div
                    style={{
                      display: "flex",
                      alignItems: "center",
                      gap: 8,
                      fontSize: 14,
                      color: "#fff",
                      fontWeight: 400,
                      background: "#ED1B36",
                      padding: "6px 12px",
                      borderRadius: 4,
                    }}
                  >
                    <AiOutlineClockCircle size={16} />
                    <span className="d-none d-sm-inline" style={{ color: '#fff' }}>
                      Please choose your lucky numbers within
                    </span>
                    <strong
                      style={{
                        marginLeft: 4,
                        marginRight: 4, color: '#fff'
                      }}
                    >
                      {formattedTime}
                    </strong>
                    mins
                  </div>
                </Col>

                <Col xs="auto">
                  <Button
                    variant="link"
                    size="sm"
                    className="text-muted p-0"
                    onClick={() => history.back()}
                  >
                    <AiOutlineLeft style={{ marginRight: 4 }} />
                    Go back
                  </Button>
                </Col>
              </Row>

              {/* Coupon Table Header */}
              <Row
                style={{
                  padding: "8px 24px",
                  fontSize: 15,
                  fontWeight: 600,
                  color: "#ACACAC",
                  background: "#FDF3EC",
                }}
              >
                <Col xs={1} className="text-center">
                  Serial no.
                </Col>
                <Col xs={4} className="text-center">
                  Coupon
                </Col>
                <Col xs={1} className="text-center">
                  Series
                </Col>
                <Col xs={3} className="text-center">
                  Coupon ID
                </Col>
                <Col xs={3} className="text-center">
                  Coupon Generation
                </Col>
              </Row>

              {/* Coupon List */}
              {coupons.map((coupon) => (
                <Row
                  key={coupon.id ?? coupon.serialNo}
                  style={{
                    padding: "12px 24px",
                    borderBottom: "1px solid #3B322B",
                    background: "#FDF3EC",
                    position: "relative",
                    alignItems: "stretch",
                  }}
                >
                  {/* Serial No */}
                  <Col xs={1} className="d-flex justify-content-center">
                    <span
                      style={{
                        width: 32,
                        height: 32,
                        borderRadius: "9999px",
                        color: "#fff",
                        display: "inline-flex",
                        alignItems: "center",
                        justifyContent: "center",
                        fontSize: 15,
                        fontWeight: 600,
                        background:
                          editingCouponId === (coupon.id ?? coupon.serialNo)
                            ? "#4D4236"
                            : "#ACACAC",
                      }}
                    >
                      {String(coupon.serialNo).padStart(2, "0")}
                    </span>
                  </Col>

                  {/* Coupon ticket */}
                  <Col xs={4} className="d-flex align-items-center">
                    <div style={{ position: "relative", paddingTop: 8, paddingBottom: 8 }}>
                      <div
                        style={{
                          background: "#fff",
                          borderRadius: 12,
                          border: "1px solid #d1d5db",
                          display: "flex",
                          overflow: "hidden",
                          width: 380,
                          minHeight: 100,
                          boxShadow: "0 .125rem .25rem rgba(0,0,0,.075)",
                          position: "relative",
                        }}
                      >
                        {/* Left */}
                        <div
                          style={{
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "flex-start",
                            justifyContent: "center",
                            width: "40%",
                            padding: "12px 12px",
                          }}
                        >
                          <Image
                            width={200}
                            height={80}
                            style={{ objectFit: "contain" }}
                            src="/public/images/logo-kutoot.png"
                            alt="logo"
                          />
                          <div
                            style={{
                              marginTop: 4,
                              fontSize: 14,
                              fontWeight: 600,
                              lineHeight: 1.3,
                              color: "#1f2937",
                            }}
                          >
                            {response?.data?.camp_title}
                          </div>
                        </div>
                        {/* Divider w/ notches */}
                        <div
                          style={{
                            display: "flex",
                            flexDirection: "column",
                            justifyContent: "space-between",
                            alignItems: "center",
                            height: "100%",
                            position: "relative",
                          }}
                        >
                          <div
                            style={{
                              position: "absolute",
                              top: 12,
                              width: 20,
                              height: 16,
                              background: "#FDFBF6",
                              borderBottomLeftRadius: "9999px",
                              borderBottomRightRadius: "9999px",
                            }}
                          />
                          <div
                            style={{
                              height: "100%",
                              borderLeft: "1px dashed #d1d5db",
                              margin: "0 8px",
                            }}
                          />
                          <div
                            style={{
                              position: "absolute",
                              bottom: 12,
                              width: 20,
                              height: 16,
                              background: "#FDFBF6",
                              borderTopLeftRadius: "9999px",
                              borderTopRightRadius: "9999px",
                            }}
                          />
                        </div>
                        {/* Right */}
                        <div
                          style={{
                            display: "flex",
                            flexDirection: "column",
                            justifyContent: "center",
                            flex: 1,
                            padding: "0 8px",
                          }}
                        >
                          <div style={{ fontSize: 12, color: "#6b7280" }}>
                            Campaign ID
                          </div>
                          <div
                            style={{
                              fontWeight: 400,
                              fontSize: 16,
                              color: "#374151",
                              marginBottom: 4,
                            }}
                          >
                            {coupon?.id ?? "-"}
                          </div>
                          <div style={{ fontSize: 12, color: "#6b7280" }}>
                            Coupon ID
                          </div>
                          <div
                            style={{
                              fontWeight: 400,
                              fontSize: 14,
                              color: "#1f2937",
                              letterSpacing: 1,
                              display: "flex",
                              alignItems: "center",
                              gap: 1,
                              flexWrap: "wrap",
                            }}
                          >
                            <span>{response?.data?.["series-prefix"]} </span>
                            <span style={{ fontSize: 18, color: "#374151" }}>
                              -
                            </span>
                            {coupon.numbers.map((num, i) => (
                              <Fragment key={i}>
                                <span>{num}</span>
                                {i < coupon.numbers.length - 1 && (
                                  <span style={{ fontSize: 18, color: "#374151" }}>
                                    -
                                  </span>
                                )}
                              </Fragment>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </Col>

                  {/* Series */}
                  <Col xs={1} className="text-center">
                    <span style={{ fontWeight: 600, fontSize: 18 }}>
                      {response.data?.['series-prefix']}
                    </span>
                  </Col>

                  {/* Coupon ID or Editing UI */}
                  {editingCouponId === coupon.id ? (
                    <Col
                      xs={3}
                      className="d-flex flex-column align-items-center justify-content-center"
                    >
                      <div
                        className="d-flex align-items-center justify-content-center"
                        style={{ gap: 4 }}
                      >
                        <span
                          style={{
                            fontWeight: 700,
                            fontSize: 18,
                            color: "#374151",
                          }}
                        >
                          {response?.data?.["series-prefix"]}
                        </span>
                        <span style={{ fontSize: 20, color: "#374151" }}>-</span>
                        {Array.from(
                          { length: response?.data?.numbers_per_ticket ?? 0 },
                          (_, i) => i
                        ).map((i) => (
                          <Fragment key={i}>
                            <DottedCircle
                              value={
                                selectedNumbers[i]
                                  ? selectedNumbers[i]
                                    .toString()
                                    .padStart(2, "0")
                                  : ""
                              }
                            />
                            {i <
                              (response?.data?.numbers_per_ticket ?? 0) - 1 && (
                                <span style={{ fontSize: 20, color: "#374151" }}>
                                  -
                                </span>
                              )}
                          </Fragment>
                        ))}
                      </div>
                      <Card
                        style={{
                          marginTop: 12,
                          borderRadius: 12,
                        }}
                      >
                        <Card.Body style={{ padding: 12 }}>
                          <div className="d-flex justify-content-end mb-1">
                            <Button
                              variant="link"
                              size="sm"
                              onClick={() => setEditingCouponId(null)}
                              aria-label="Close number pad"
                              style={{ color: "#6c757d", textDecoration: "none" }}
                            >
                              Ã—
                            </Button>
                          </div>
                          <div
                            style={{
                              display: "grid",
                              gridTemplateColumns: "repeat(10, 1fr)",
                              gap: 8,
                              fontSize: 12,
                            }}
                          >
                            {Array.from(
                              {
                                length:
                                  (response?.data?.number_max ?? 0) -
                                  (response?.data?.number_min ?? 0) +
                                  1 || 0,
                              },
                              (_, i) =>
                                (response?.data?.number_min ?? 0) + i
                            ).map((num) => (
                              <Button
                                key={num}
                                variant="outline-secondary2"
                                size="sm"
                                onClick={() => handleNumberSelect(num)}
                                style={{
                                  width: 28,
                                  height: 28,
                                  padding: 0,
                                  borderColor: '#EA6B1E',
                                  borderRadius: "9999px",
                                  fontWeight: 500,
                                }}
                              >
                                {num.toString().padStart(2, "0")}
                              </Button>
                            ))}
                          </div>
                        </Card.Body>
                      </Card>
                    </Col>
                  ) : (
                    <Col xs={3} className="text-center">
                      <div className="d-flex align-items-center" style={{ gap: 8 }}>
                        <div className="d-flex align-items-center" style={{ gap: 4, marginLeft: 4 }}>
                          <span
                            style={{
                              fontWeight: 700,
                              fontSize: 18,
                              color: "#374151",
                            }}
                          >
                            {response?.data?.["series-prefix"]}
                          </span>
                          <span style={{ fontSize: 24, color: "#374151" }}>-</span>
                          {coupon.numbers.map((num, i) => (
                            <Fragment key={i}>
                              <span
                                style={{
                                  width: 24,
                                  height: 24,
                                  borderRadius: "9999px",
                                  background: "#dc3545",
                                  color: "#fff",
                                  display: "inline-flex",
                                  alignItems: "center",
                                  justifyContent: "center",
                                  fontSize: 12,
                                }}
                              >
                                {num}
                              </span>
                              {i < coupon.numbers.length - 1 && (
                                <span style={{ fontSize: 24, color: "#374151" }}>
                                  -
                                </span>
                              )}
                            </Fragment>
                          ))}
                        </div>
                      </div>
                    </Col>
                  )}

                  {/* Coupon Generation */}
                  <Col xs={3} className="d-flex flex-column align-items-center">
                    {editingCouponId === coupon.id ? (
                      <div className="d-flex flex-column align-items-center w-100">
                        <Button
                          variant={
                            selectedNumbers.length ===
                              response?.data?.numbers_per_ticket && !saveLoading
                              ? "warning"
                              : "secondary"
                          }
                          disabled={
                            selectedNumbers.length !==
                            response?.data?.numbers_per_ticket || saveLoading
                          }
                          onClick={handleSaveManualCoupon}
                          style={{
                            width: 112, marginBottom: 8, borderRadius: 9999, fontWeight: 700, background: (selectedNumbers.length ===
                              response?.data?.numbers_per_ticket && !saveLoading) ? '#EA6B1E' : '', color: (selectedNumbers.length ===
                                response?.data?.numbers_per_ticket && !saveLoading) ? '#fff' : ''
                          }}
                        >
                          {saveLoading ? "Saving..." : "Save"}
                        </Button>
                        <Button
                          variant="light"
                          onClick={() => setEditingCouponId(null)}
                          style={{
                            width: 112,
                            marginBottom: 8,
                            borderRadius: 9999,
                            border: "1px solid #00000017",
                            color: "#000000b0",
                          }}
                        >
                          Cancel
                        </Button>
                      </div>
                    ) : (
                      <Button
                        variant="link1"
                        style={{ fontSize: 12, fontWeight: 600, textDecoration: "underline", cursor: "pointer", color: '#3A3A3A' }}
                        onClick={() => handleManualGenerate(coupon.id)}
                      >
                        Edit &rsaquo;
                      </Button>
                    )}
                  </Col>
                </Row>
              ))}
            </div>
          </div>

          {/* Checkout Fixed Footer */}
          <div
            className="fixed-bottom d-flex justify-content-center"
            style={{ background: "#fd7e14", padding: "12px 0", zIndex: 1050 }}
          >
            <Button
              disabled={formattedTime === "00:00"}
              onClick={() => alert("Proceeding to checkout...")}
              variant="link"
              style={{
                width: "100%",
                maxWidth: 768,
                textAlign: "center",
                color: "#fff",
                fontSize: 18,
                fontWeight: 600,
                textDecoration: "none",
              }}
            >
              Proceed to Checkout &nbsp; &rarr;
            </Button>
          </div>
        </Container>
      )}
    </div>
  );
};

export default Page;